package com.angelina.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExpenseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllPropertiesEquals(Expense expected, Expense actual) {
        assertExpenseAutoGeneratedPropertiesEquals(expected, actual);
        assertExpenseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllUpdatablePropertiesEquals(Expense expected, Expense actual) {
        assertExpenseUpdatableFieldsEquals(expected, actual);
        assertExpenseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAutoGeneratedPropertiesEquals(Expense expected, Expense actual) {
        assertThat(expected)
            .as("Verify Expense auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableFieldsEquals(Expense expected, Expense actual) {
        assertThat(expected)
            .as("Verify Expense relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableRelationshipsEquals(Expense expected, Expense actual) {
        assertThat(expected)
            .as("Verify Expense relationships")
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()));
    }
}
